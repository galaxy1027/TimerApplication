
TimerApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004658  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004838  08004838  00005838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d8  080048d8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000058d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080048e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08004950  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004950  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010777  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002401  00000000  00000000  00016817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00018c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00019968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025de0  00000000  00000000  0001a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001078a  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed32f  00000000  00000000  0005091a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dc49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  0013dc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00141828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004820 	.word	0x08004820

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004820 	.word	0x08004820

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	f023 030f 	bic.w	r3, r3, #15
 800060e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	f043 030c 	orr.w	r3, r3, #12
 800061c:	b2db      	uxtb	r3, r3
 800061e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	b2db      	uxtb	r3, r3
 8000628:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	f043 030c 	orr.w	r3, r3, #12
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	2364      	movs	r3, #100	@ 0x64
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2304      	movs	r3, #4
 8000652:	f001 f947 	bl	80018e4 <HAL_I2C_Master_Transmit>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af02      	add	r7, sp, #8
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	460b      	mov	r3, r1
 8000668:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	f023 030f 	bic.w	r3, r3, #15
 8000670:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	f043 030d 	orr.w	r3, r3, #13
 800067e:	b2db      	uxtb	r3, r3
 8000680:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	f043 0309 	orr.w	r3, r3, #9
 8000688:	b2db      	uxtb	r3, r3
 800068a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f107 0208 	add.w	r2, r7, #8
 80006ae:	2364      	movs	r3, #100	@ 0x64
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2304      	movs	r3, #4
 80006b4:	f001 f916 	bl	80018e4 <HAL_I2C_Master_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff96 	bl	80005fc <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e006      	b.n	80006e4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 80006d6:	2120      	movs	r1, #32
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffc0 	bl	800065e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80006e8:	ddf5      	ble.n	80006d6 <lcd_clear+0x16>
    }
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80006fc:	2032      	movs	r0, #50	@ 0x32
 80006fe:	f000 fd29 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000702:	2130      	movs	r1, #48	@ 0x30
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff79 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(5);
 800070a:	2005      	movs	r0, #5
 800070c:	f000 fd22 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000710:	2130      	movs	r1, #48	@ 0x30
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff72 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fd1b 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800071e:	2130      	movs	r1, #48	@ 0x30
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff6b 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fd14 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800072c:	2120      	movs	r1, #32
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff64 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fd0d 	bl	8001154 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800073a:	2128      	movs	r1, #40	@ 0x28
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff5d 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fd06 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000748:	2108      	movs	r1, #8
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff56 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fcff 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff4f 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f000 fcf8 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000764:	2106      	movs	r1, #6
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff48 	bl	80005fc <lcd_send_cmd>
    HAL_Delay(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fcf1 	bl	8001154 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000772:	210c      	movs	r1, #12
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff41 	bl	80005fc <lcd_send_cmd>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 800078c:	e007      	b.n	800079e <lcd_puts+0x1c>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	603a      	str	r2, [r7, #0]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff60 	bl	800065e <lcd_send_data>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f3      	bne.n	800078e <lcd_puts+0xc>
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fc5d 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f861 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f8eb 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c2:	f000 f8a9 	bl	8000918 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fadc 	bl	8000d84 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007cc:	2101      	movs	r1, #1
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fb0e 	bl	8000df0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <main+0xb8>)
 80007d6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007da:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <main+0xb8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <main+0xb8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <main+0xb8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <main+0xb8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007f4:	491c      	ldr	r1, [pc, #112]	@ (8000868 <main+0xb8>)
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fb86 	bl	8000f08 <BSP_COM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <main+0x56>
  {
    Error_Handler();
 8000802:	f000 f977 	bl	8000af4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scanner(); // Get lcd address
 8000806:	f000 f903 	bl	8000a10 <I2C_Scanner>

  // Initialize lcd

  lcd.hi2c = &hi2c1;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0xbc>)
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <main+0xc0>)
 800080e:	601a      	str	r2, [r3, #0]
  lcd.address = lcdAddr;
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <main+0xc4>)
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <main+0xbc>)
 8000816:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <main+0xbc>)
 800081a:	f7ff ff6b 	bl	80006f4 <lcd_init>

  char message[20];
  while (1)
  {

      for (int i = 0; i < 10; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e01d      	b.n	8000860 <main+0xb0>
          lcd_clear(&lcd);
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <main+0xbc>)
 8000826:	f7ff ff4b 	bl	80006c0 <lcd_clear>
          snprintf(message, 20 ,"Message %d", i);
 800082a:	4638      	mov	r0, r7
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <main+0xc8>)
 8000830:	2114      	movs	r1, #20
 8000832:	f003 fb41 	bl	8003eb8 <sniprintf>
          lcd_puts(&lcd, message);
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <main+0xbc>)
 800083c:	f7ff ffa1 	bl	8000782 <lcd_puts>
          Write_Str("\n\r", 2);
 8000840:	2102      	movs	r1, #2
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <main+0xcc>)
 8000844:	f000 f932 	bl	8000aac <Write_Str>
          Write_Str(message, 20);
 8000848:	463b      	mov	r3, r7
 800084a:	2114      	movs	r1, #20
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f92d 	bl	8000aac <Write_Str>
          HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000856:	f000 fc7d 	bl	8001154 <HAL_Delay>
      for (int i = 0; i < 10; i++) {
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b09      	cmp	r3, #9
 8000864:	ddde      	ble.n	8000824 <main+0x74>
 8000866:	e7da      	b.n	800081e <main+0x6e>
 8000868:	2000008c 	.word	0x2000008c
 800086c:	200000f4 	.word	0x200000f4
 8000870:	2000009c 	.word	0x2000009c
 8000874:	200000f0 	.word	0x200000f0
 8000878:	08004838 	.word	0x08004838
 800087c:	08004844 	.word	0x08004844

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2238      	movs	r2, #56	@ 0x38
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fb48 	bl	8003f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fcd4 	bl	8002250 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2340      	movs	r3, #64	@ 0x40
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008be:	2304      	movs	r3, #4
 80008c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008c2:	2355      	movs	r3, #85	@ 0x55
 80008c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fd6e 	bl	80023b8 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008e2:	f000 f907 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 f86c 	bl	80029dc <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800090a:	f000 f8f3 	bl	8000af4 <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3750      	adds	r7, #80	@ 0x50
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f000 ff2a 	bl	80017ac <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 f8c9 	bl	8000af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f001 fbdb 	bl	8002120 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f8c0 	bl	8000af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f001 fc1d 	bl	80021b6 <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f8b7 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000009c 	.word	0x2000009c
 8000990:	40005400 	.word	0x40005400
 8000994:	40b285c2 	.word	0x40b285c2

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009bc:	f043 0320 	orr.w	r3, r3, #32
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0320 	and.w	r3, r3, #32
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_GPIO_Init+0x74>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <I2C_Scanner>:
 * I2C Scanner
 * Detects an I2C device connected on the bus. This device must be connected to I2C1.
 * The address found is then printed over UART.
 */
void I2C_Scanner(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0c2      	sub	sp, #264	@ 0x108
 8000a14:	af00      	add	r7, sp, #0
    uint8_t addr = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    bool addrFound = false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    while (addr < 128 && !addrFound)
 8000a22:	e02c      	b.n	8000a7e <I2C_Scanner+0x6e>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8000a24:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	230a      	movs	r3, #10
 8000a30:	2201      	movs	r2, #1
 8000a32:	481b      	ldr	r0, [pc, #108]	@ (8000aa0 <I2C_Scanner+0x90>)
 8000a34:	f001 f86e 	bl	8001b14 <HAL_I2C_IsDeviceReady>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d11a      	bne.n	8000a74 <I2C_Scanner+0x64>
            char messageBuffer[255];
            snprintf(messageBuffer, 255, "\rDevice found at address: 0x%X\n", addr << 1);
 8000a3e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1d38      	adds	r0, r7, #4
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <I2C_Scanner+0x94>)
 8000a48:	21ff      	movs	r1, #255	@ 0xff
 8000a4a:	f003 fa35 	bl	8003eb8 <sniprintf>
            Write_Str(messageBuffer, strlen(messageBuffer));
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fbe5 	bl	8000220 <strlen>
 8000a56:	4602      	mov	r2, r0
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f825 	bl	8000aac <Write_Str>
            lcdAddr = addr << 1;
 8000a62:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <I2C_Scanner+0x98>)
 8000a6c:	701a      	strb	r2, [r3, #0]
            addrFound = true;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
        }
        addr++;
 8000a74:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    while (addr < 128 && !addrFound)
 8000a7e:	f997 3107 	ldrsb.w	r3, [r7, #263]	@ 0x107
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db06      	blt.n	8000a94 <I2C_Scanner+0x84>
 8000a86:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1c7      	bne.n	8000a24 <I2C_Scanner+0x14>
    }


}
 8000a94:	bf00      	nop
 8000a96:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000009c 	.word	0x2000009c
 8000aa4:	08004848 	.word	0x08004848
 8000aa8:	200000f0 	.word	0x200000f0

08000aac <Write_Str>:
 *
 * Write a string over USART. This writes to USART2, which is the virtual com port by default.
 * For each character, wait until the USART2 transmit data register is ready to read. Then send a byte at a time.
 */
void Write_Str(char *str, unsigned int maxSize)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
    while (i < maxSize && str[i] != '\0')
 8000aba:	e00a      	b.n	8000ad2 <Write_Str+0x26>
    {
        HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)&str[i], 1, 100);
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	18d1      	adds	r1, r2, r3
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	480a      	ldr	r0, [pc, #40]	@ (8000af0 <Write_Str+0x44>)
 8000ac8:	f002 fc4c 	bl	8003364 <HAL_UART_Transmit>
        i++;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
    while (i < maxSize && str[i] != '\0')
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d205      	bcs.n	8000ae6 <Write_Str+0x3a>
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1ea      	bne.n	8000abc <Write_Str+0x10>
    }
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000108 	.word	0x20000108

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b36:	f001 fc2f 	bl	8002398 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a0      	sub	sp, #128	@ 0x80
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	2254      	movs	r2, #84	@ 0x54
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 f9db 	bl	8003f24 <memset>
  if(hi2c->Instance==I2C1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a2d      	ldr	r2, [pc, #180]	@ (8000c28 <HAL_I2C_MspInit+0xe0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d153      	bne.n	8000c20 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b78:	2340      	movs	r3, #64	@ 0x40
 8000b7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f945 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b90:	f7ff ffb0 	bl	8000af4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	4a24      	ldr	r2, [pc, #144]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f000 fc48 	bl	8001478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <HAL_I2C_MspInit+0xe8>)
 8000c04:	f000 fc38 	bl	8001478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_I2C_MspInit+0xe4>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c20:	bf00      	nop
 8000c22:	3780      	adds	r7, #128	@ 0x80
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 fa45 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f918 	bl	8000ecc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f003 f930 	bl	8003f34 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200000fc 	.word	0x200000fc
 8000d08:	200002e8 	.word	0x200002e8

08000d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	@ (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	@ (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f003 f8ef 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fd25 	bl	80007b0 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   r0, =_estack
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d74:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d7c:	200002e8 	.word	0x200002e8

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <BSP_LED_Init+0x64>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <BSP_LED_Init+0x64>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <BSP_LED_Init+0x64>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000da6:	2320      	movs	r3, #32
 8000da8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <BSP_LED_Init+0x68>)
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	f107 020c 	add.w	r2, r7, #12
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fb57 	bl	8001478 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <BSP_LED_Init+0x68>)
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fcd0 	bl	800177c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	20000004 	.word	0x20000004

08000df0 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000e00:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <BSP_PB_Init+0xc4>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb4 <BSP_PB_Init+0xc4>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0c:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <BSP_PB_Init+0xc4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10c      	bne.n	8000e46 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <BSP_PB_Init+0xc8>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fb1a 	bl	8001478 <HAL_GPIO_Init>
 8000e44:	e031      	b.n	8000eaa <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e4a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <BSP_PB_Init+0xc8>)
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	f107 020c 	add.w	r2, r7, #12
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fb0c 	bl	8001478 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <BSP_PB_Init+0xcc>)
 8000e66:	441a      	add	r2, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4915      	ldr	r1, [pc, #84]	@ (8000ec0 <BSP_PB_Init+0xd0>)
 8000e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4610      	mov	r0, r2
 8000e74:	f000 fabc 	bl	80013f0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <BSP_PB_Init+0xcc>)
 8000e7e:	1898      	adds	r0, r3, r2
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <BSP_PB_Init+0xd4>)
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f000 fa93 	bl	80013b6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e90:	2028      	movs	r0, #40	@ 0x28
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <BSP_PB_Init+0xd8>)
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f000 fa56 	bl	800134e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ea2:	2328      	movs	r3, #40	@ 0x28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fa6c 	bl	8001382 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000100 	.word	0x20000100
 8000ec0:	08004880 	.word	0x08004880
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	20000014 	.word	0x20000014

08000ecc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <BSP_PB_IRQHandler+0x20>)
 8000edc:	4413      	add	r3, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa9a 	bl	8001418 <HAL_EXTI_IRQHandler>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000100 	.word	0x20000100

08000ef0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d903      	bls.n	8000f26 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f1e:	f06f 0301 	mvn.w	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e018      	b.n	8000f58 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2294      	movs	r2, #148	@ 0x94
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <BSP_COM_Init+0x5c>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f852 	bl	8000fdc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2294      	movs	r2, #148	@ 0x94
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <BSP_COM_Init+0x5c>)
 8000f42:	4413      	add	r3, r2
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f80e 	bl	8000f68 <MX_LPUART1_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000f52:	f06f 0303 	mvn.w	r3, #3
 8000f56:	e000      	b.n	8000f5a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000f58:	68fb      	ldr	r3, [r7, #12]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000108 	.word	0x20000108

08000f68 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_LPUART1_Init+0x60>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	220c      	movs	r2, #12
 8000f86:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	895b      	ldrh	r3, [r3, #10]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	891b      	ldrh	r3, [r3, #8]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	899b      	ldrh	r3, [r3, #12]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fb4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f002 f97a 	bl	80032b0 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000000c 	.word	0x2000000c

08000fcc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff8d 	bl	8000ef0 <BSP_PB_Callback>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <COM1_MspInit+0x94>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <COM1_MspInit+0x94>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <COM1_MspInit+0x94>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <COM1_MspInit+0x94>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <COM1_MspInit+0x94>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <COM1_MspInit+0x94>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <COM1_MspInit+0x94>)
 8001016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001018:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <COM1_MspInit+0x94>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <COM1_MspInit+0x94>)
 8001022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800102c:	2304      	movs	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800103c:	230c      	movs	r3, #12
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f000 fa15 	bl	8001478 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800104e:	2308      	movs	r3, #8
 8001050:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001056:	230c      	movs	r3, #12
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001064:	f000 fa08 	bl	8001478 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	@ 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f95a 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f80d 	bl	80010a4 <HAL_InitTick>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	e001      	b.n	800109a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001096:	f7ff fd33 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109a:	79fb      	ldrb	r3, [r7, #7]

}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_InitTick+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d022      	beq.n	80010fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_InitTick+0x6c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_InitTick+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f966 	bl	800139e <HAL_SYSTICK_Config>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10f      	bne.n	80010f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d809      	bhi.n	80010f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e6:	f000 f932 	bl	800134e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_InitTick+0x70>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e007      	b.n	8001102 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e004      	b.n	8001102 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e001      	b.n	8001102 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000001c 	.word	0x2000001c
 8001110:	20000000 	.word	0x20000000
 8001114:	20000018 	.word	0x20000018

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_IncTick+0x1c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x20>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a03      	ldr	r2, [pc, #12]	@ (8001134 <HAL_IncTick+0x1c>)
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	2000019c 	.word	0x2000019c
 8001138:	2000001c 	.word	0x2000001c

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000019c 	.word	0x2000019c

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800116c:	d004      	beq.n	8001178 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_Delay+0x40>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001178:	bf00      	nop
 800117a:	f7ff ffdf 	bl	800113c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	d8f7      	bhi.n	800117a <HAL_Delay+0x26>
  {
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000001c 	.word	0x2000001c

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	@ (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	@ (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	@ (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001318:	f7ff ff8e 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff29 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff40 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff90 	bl	800128c <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5f 	bl	8001238 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff33 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa4 	bl	80012f4 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013b6:	b480      	push	{r7}
 80013b8:	b087      	sub	sp, #28
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	460b      	mov	r3, r1
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80013c8:	7afb      	ldrb	r3, [r7, #11]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
      break;
 80013d4:	e005      	b.n	80013e2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
      break;
 80013e0:	bf00      	nop
  }

  return status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e003      	b.n	800140c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800140a:	2300      	movs	r3, #0
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2201      	movs	r2, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_EXTI_IRQHandler+0x5c>)
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4798      	blx	r3
    }
  }
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40010414 	.word	0x40010414

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001486:	e15a      	b.n	800173e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 814c 	beq.w	8001738 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80a6 	beq.w	8001738 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	4a5a      	ldr	r2, [pc, #360]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001604:	4a56      	ldr	r2, [pc, #344]	@ (8001760 <HAL_GPIO_Init+0x2e8>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800162e:	d01f      	beq.n	8001670 <HAL_GPIO_Init+0x1f8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x2ec>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d019      	beq.n	800166c <HAL_GPIO_Init+0x1f4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_GPIO_Init+0x2f0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1f0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_GPIO_Init+0x2f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a49      	ldr	r2, [pc, #292]	@ (8001770 <HAL_GPIO_Init+0x2f8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a48      	ldr	r2, [pc, #288]	@ (8001774 <HAL_GPIO_Init+0x2fc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e4>
 8001658:	2305      	movs	r3, #5
 800165a:	e00a      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 800165c:	2306      	movs	r3, #6
 800165e:	e008      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001660:	2304      	movs	r3, #4
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001664:	2303      	movs	r3, #3
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001670:	2300      	movs	r3, #0
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001682:	4937      	ldr	r1, [pc, #220]	@ (8001760 <HAL_GPIO_Init+0x2e8>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001690:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016b4:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016de:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_GPIO_Init+0x300>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001732:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f ae9d 	bne.w	8001488 <HAL_GPIO_Init+0x10>
  }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001000 	.word	0x48001000
 8001774:	48001400 	.word	0x48001400
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e08d      	b.n	80018da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff f9b8 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	@ 0x24
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e006      	b.n	8001834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d108      	bne.n	800184e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	e007      	b.n	800185e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800185c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800186c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69d9      	ldr	r1, [r3, #28]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
 80018f4:	4613      	mov	r3, r2
 80018f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b20      	cmp	r3, #32
 8001902:	f040 80fd 	bne.w	8001b00 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_I2C_Master_Transmit+0x30>
 8001910:	2302      	movs	r3, #2
 8001912:	e0f6      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800191c:	f7ff fc0e 	bl	800113c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2319      	movs	r3, #25
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fa00 	bl	8001d34 <I2C_WaitOnFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0e1      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2221      	movs	r2, #33	@ 0x21
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2210      	movs	r2, #16
 800194a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	893a      	ldrh	r2, [r7, #8]
 800195e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d906      	bls.n	800197e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	22ff      	movs	r2, #255	@ 0xff
 8001974:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001976:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e007      	b.n	800198e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001988:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800198c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d024      	beq.n	80019e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	8979      	ldrh	r1, [r7, #10]
 80019d2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <HAL_I2C_Master_Transmit+0x228>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fb6f 	bl	80020bc <I2C_TransferConfig>
 80019de:	e066      	b.n	8001aae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	4b48      	ldr	r3, [pc, #288]	@ (8001b0c <HAL_I2C_Master_Transmit+0x228>)
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fb64 	bl	80020bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019f4:	e05b      	b.n	8001aae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f9f3 	bl	8001de6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07b      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d034      	beq.n	8001aae <HAL_I2C_Master_Transmit+0x1ca>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d130      	bne.n	8001aae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f96c 	bl	8001d34 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e04d      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2bff      	cmp	r3, #255	@ 0xff
 8001a6e:	d90e      	bls.n	8001a8e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	22ff      	movs	r2, #255	@ 0xff
 8001a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	8979      	ldrh	r1, [r7, #10]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fb18 	bl	80020bc <I2C_TransferConfig>
 8001a8c:	e00f      	b.n	8001aae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	8979      	ldrh	r1, [r7, #10]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 fb07 	bl	80020bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d19e      	bne.n	80019f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	6a39      	ldr	r1, [r7, #32]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f9d9 	bl	8001e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e01a      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_I2C_Master_Transmit+0x22c>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	80002000 	.word	0x80002000
 8001b10:	fe00e800 	.word	0xfe00e800

08001b14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	460b      	mov	r3, r1
 8001b22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	f040 80d6 	bne.w	8001ce2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0cc      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2C_IsDeviceReady+0x44>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e0c5      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2224      	movs	r2, #36	@ 0x24
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_I2C_IsDeviceReady+0x72>
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b84:	e006      	b.n	8001b94 <HAL_I2C_IsDeviceReady+0x80>
 8001b86:	897b      	ldrh	r3, [r7, #10]
 8001b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b90:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff facf 	bl	800113c <HAL_GetTick>
 8001b9e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001bcc:	e034      	b.n	8001c38 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd4:	d01a      	beq.n	8001c0c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7ff fab1 	bl	800113c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <HAL_I2C_IsDeviceReady+0xd8>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e06b      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b10      	cmp	r3, #16
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_I2C_IsDeviceReady+0x130>
 8001c3e:	7fbb      	ldrb	r3, [r7, #30]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0c4      	beq.n	8001bce <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d01a      	beq.n	8001c88 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f869 	bl	8001d34 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e03b      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e02d      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f84e 	bl	8001d34 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e020      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f63f af56 	bhi.w	8001b6e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
  }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d103      	bne.n	8001d0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d007      	beq.n	8001d28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	619a      	str	r2, [r3, #24]
  }
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d44:	e03b      	b.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f8d6 	bl	8001efc <I2C_IsErrorOccurred>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e041      	b.n	8001dde <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d60:	d02d      	beq.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff f9eb 	bl	800113c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d122      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4013      	ands	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d113      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d0b4      	beq.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001df2:	e033      	b.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f87f 	bl	8001efc <I2C_IsErrorOccurred>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e031      	b.n	8001e6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e0e:	d025      	beq.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e10:	f7ff f994 	bl	800113c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d302      	bcc.n	8001e26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11a      	bne.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d013      	beq.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e007      	b.n	8001e6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d1c4      	bne.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e80:	e02f      	b.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f838 	bl	8001efc <I2C_IsErrorOccurred>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e02d      	b.n	8001ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f951 	bl	800113c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11a      	bne.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d013      	beq.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e007      	b.n	8001ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d1c8      	bne.n	8001e82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d068      	beq.n	8001ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f30:	e049      	b.n	8001fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f38:	d045      	beq.n	8001fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f8ff 	bl	800113c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_IsErrorOccurred+0x54>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f72:	d121      	bne.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f7a:	d01d      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d01a      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f92:	f7ff f8d3 	bl	800113c <HAL_GetTick>
 8001f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f98:	e00e      	b.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f9a:	f7ff f8cf 	bl	800113c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b19      	cmp	r3, #25
 8001fa6:	d907      	bls.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fb6:	e006      	b.n	8001fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d1e9      	bne.n	8001f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d003      	beq.n	8001fdc <I2C_IsErrorOccurred+0xe0>
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0aa      	beq.n	8001f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800201c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800203e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff fe3b 	bl	8001cec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <I2C_IsErrorOccurred+0x1bc>)
 8002082:	400b      	ands	r3, r1
 8002084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	@ 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	fe00e800 	.word	0xfe00e800

080020bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	4613      	mov	r3, r2
 80020cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020d4:	7a7b      	ldrb	r3, [r7, #9]
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	0d5b      	lsrs	r3, r3, #21
 80020f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <I2C_TransferConfig+0x60>)
 80020fc:	430b      	orrs	r3, r1
 80020fe:	43db      	mvns	r3, r3
 8002100:	ea02 0103 	and.w	r1, r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	03ff63ff 	.word	0x03ff63ff

08002120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	d138      	bne.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002140:	2302      	movs	r3, #2
 8002142:	e032      	b.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	@ 0x24
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d139      	bne.n	8002240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e033      	b.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2224      	movs	r2, #36	@ 0x24
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d141      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226a:	d131      	bne.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800226c:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002272:	4a46      	ldr	r2, [pc, #280]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227c:	4b43      	ldr	r3, [pc, #268]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002284:	4a41      	ldr	r2, [pc, #260]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228c:	4b40      	ldr	r3, [pc, #256]	@ (8002390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2232      	movs	r2, #50	@ 0x32
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a2:	e002      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b6:	d102      	bne.n	80022be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f2      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ca:	d158      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e057      	b.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022d6:	4a2d      	ldr	r2, [pc, #180]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022e0:	e04d      	b.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e8:	d141      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f6:	d131      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f8:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022fe:	4a23      	ldr	r2, [pc, #140]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002310:	4a1e      	ldr	r2, [pc, #120]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002318:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2232      	movs	r2, #50	@ 0x32
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9b      	lsrs	r3, r3, #18
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232e:	e002      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3b01      	subs	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002342:	d102      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f2      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002356:	d112      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e011      	b.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800236c:	e007      	b.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002376:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002378:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40007000 	.word	0x40007000
 8002390:	20000000 	.word	0x20000000
 8002394:	431bde83 	.word	0x431bde83

08002398 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e2fe      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d075      	beq.n	80024c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d6:	4b97      	ldr	r3, [pc, #604]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e0:	4b94      	ldr	r3, [pc, #592]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3e>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_OscConfig+0x44>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e2d9      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x74>
 800241e:	4b85      	ldr	r3, [pc, #532]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a84      	ldr	r2, [pc, #528]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7e      	ldr	r2, [pc, #504]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b7c      	ldr	r3, [pc, #496]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7b      	ldr	r2, [pc, #492]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 8002450:	4b78      	ldr	r3, [pc, #480]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a77      	ldr	r2, [pc, #476]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b75      	ldr	r3, [pc, #468]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a74      	ldr	r2, [pc, #464]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fe64 	bl	800113c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fe60 	bl	800113c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e29e      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248a:	4b6a      	ldr	r3, [pc, #424]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xc0>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe50 	bl	800113c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fe4c 	bl	800113c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e28a      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b2:	4b60      	ldr	r3, [pc, #384]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0xe8>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d075      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b59      	ldr	r3, [pc, #356]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b56      	ldr	r3, [pc, #344]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_OscConfig+0x136>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_OscConfig+0x13c>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11f      	bne.n	8002534 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x154>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e25d      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b49      	ldr	r3, [pc, #292]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4946      	ldr	r1, [pc, #280]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002520:	4b45      	ldr	r3, [pc, #276]	@ (8002638 <HAL_RCC_OscConfig+0x280>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fdbd 	bl	80010a4 <HAL_InitTick>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d043      	beq.n	80025b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e249      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3c      	ldr	r2, [pc, #240]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fdf8 	bl	800113c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fdf4 	bl	800113c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e232      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	4b34      	ldr	r3, [pc, #208]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	061b      	lsls	r3, r3, #24
 800257c:	492d      	ldr	r1, [pc, #180]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e01a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2a      	ldr	r2, [pc, #168]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800258a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800258e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fdd4 	bl	800113c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fdd0 	bl	800113c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e20e      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1e0>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d041      	beq.n	800264a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01c      	beq.n	8002608 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d4:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fdad 	bl	800113c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e6:	f7fe fda9 	bl	800113c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1e7      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <HAL_RCC_OscConfig+0x22e>
 8002606:	e020      	b.n	800264a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260e:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fd90 	bl	800113c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261e:	e00d      	b.n	800263c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fd8c 	bl	800113c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d906      	bls.n	800263c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1ca      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800263c:	4b8c      	ldr	r3, [pc, #560]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ea      	bne.n	8002620 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a6 	beq.w	80027a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800265c:	4b84      	ldr	r3, [pc, #528]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x2b4>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x2b6>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b7f      	ldr	r3, [pc, #508]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a7e      	ldr	r2, [pc, #504]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
 800267e:	4b7c      	ldr	r3, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b79      	ldr	r3, [pc, #484]	@ (8002874 <HAL_RCC_OscConfig+0x4bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269a:	4b76      	ldr	r3, [pc, #472]	@ (8002874 <HAL_RCC_OscConfig+0x4bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a75      	ldr	r2, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x4bc>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fd49 	bl	800113c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fd45 	bl	800113c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e183      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002874 <HAL_RCC_OscConfig+0x4bc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_RCC_OscConfig+0x32e>
 80026d4:	4b66      	ldr	r3, [pc, #408]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026da:	4a65      	ldr	r2, [pc, #404]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e4:	e024      	b.n	8002730 <HAL_RCC_OscConfig+0x378>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d110      	bne.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026ee:	4b60      	ldr	r3, [pc, #384]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	4a5e      	ldr	r2, [pc, #376]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	4a5a      	ldr	r2, [pc, #360]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270e:	e00f      	b.n	8002730 <HAL_RCC_OscConfig+0x378>
 8002710:	4b57      	ldr	r3, [pc, #348]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a56      	ldr	r2, [pc, #344]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002720:	4b53      	ldr	r3, [pc, #332]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	4a52      	ldr	r2, [pc, #328]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fd00 	bl	800113c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fcfc 	bl	800113c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e138      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b46      	ldr	r3, [pc, #280]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ed      	beq.n	8002740 <HAL_RCC_OscConfig+0x388>
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fce9 	bl	800113c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fce5 	bl	800113c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e121      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	4b3a      	ldr	r3, [pc, #232]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ed      	bne.n	800276e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002792:	7ffb      	ldrb	r3, [r7, #31]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b35      	ldr	r3, [pc, #212]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	4a34      	ldr	r2, [pc, #208]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03c      	beq.n	800282a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027be:	4a2c      	ldr	r2, [pc, #176]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fcb8 	bl	800113c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d0:	f7fe fcb4 	bl	800113c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0f2      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e2:	4b23      	ldr	r3, [pc, #140]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCC_OscConfig+0x418>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80027f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fc9b 	bl	800113c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fc97 	bl	800113c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0d5      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800281c:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80c9 	beq.w	80029c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b0c      	cmp	r3, #12
 800283e:	f000 8083 	beq.w	8002948 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d15e      	bne.n	8002908 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a08      	ldr	r2, [pc, #32]	@ (8002870 <HAL_RCC_OscConfig+0x4b8>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fc71 	bl	800113c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e00c      	b.n	8002878 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fc6d 	bl	800113c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d905      	bls.n	8002878 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ab      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b55      	ldr	r3, [pc, #340]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ec      	bne.n	800285e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b52      	ldr	r3, [pc, #328]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b52      	ldr	r3, [pc, #328]	@ (80029d4 <HAL_RCC_OscConfig+0x61c>)
 800288a:	4013      	ands	r3, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6a11      	ldr	r1, [r2, #32]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002894:	3a01      	subs	r2, #1
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800289e:	0212      	lsls	r2, r2, #8
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028a6:	0852      	lsrs	r2, r2, #1
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0552      	lsls	r2, r2, #21
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028b2:	0852      	lsrs	r2, r2, #1
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0652      	lsls	r2, r2, #25
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028be:	06d2      	lsls	r2, r2, #27
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4943      	ldr	r1, [pc, #268]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c8:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a40      	ldr	r2, [pc, #256]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d4:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fc2c 	bl	800113c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fc28 	bl	800113c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e066      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x530>
 8002906:	e05e      	b.n	80029c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a30      	ldr	r2, [pc, #192]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 800290e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fc12 	bl	800113c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fc0e 	bl	800113c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04c      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800293a:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4924      	ldr	r1, [pc, #144]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 8002940:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_RCC_OscConfig+0x620>)
 8002942:	4013      	ands	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
 8002946:	e03e      	b.n	80029c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e039      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002954:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCC_OscConfig+0x618>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	429a      	cmp	r2, r3
 8002966:	d12c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	3b01      	subs	r3, #1
 8002974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d123      	bne.n	80029c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d11b      	bne.n	80029c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d113      	bne.n	80029c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	019f800c 	.word	0x019f800c
 80029d8:	feeefffc 	.word	0xfeeefffc

080029dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e11e      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b91      	ldr	r3, [pc, #580]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b8e      	ldr	r3, [pc, #568]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	498c      	ldr	r1, [pc, #560]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b8a      	ldr	r3, [pc, #552]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e106      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d073      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d129      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a38:	4b81      	ldr	r3, [pc, #516]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0f4      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a48:	f000 f99e 	bl	8002d88 <RCC_GetSysClockFreqFromPLLSource>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4a7c      	ldr	r2, [pc, #496]	@ (8002c44 <HAL_RCC_ClockConfig+0x268>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d93f      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a56:	4b7a      	ldr	r3, [pc, #488]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d033      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12f      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a76:	4b72      	ldr	r3, [pc, #456]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7e:	4a70      	ldr	r2, [pc, #448]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e024      	b.n	8002ad6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a94:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0c6      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0be      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ab4:	f000 f8ce 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a61      	ldr	r2, [pc, #388]	@ (8002c44 <HAL_RCC_ClockConfig+0x268>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d909      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aca:	4a5d      	ldr	r2, [pc, #372]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4957      	ldr	r1, [pc, #348]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fb28 	bl	800113c <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe fb24 	bl	800113c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e095      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b43      	ldr	r3, [pc, #268]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a42      	ldr	r2, [pc, #264]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b48:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b50:	4a3b      	ldr	r2, [pc, #236]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4936      	ldr	r1, [pc, #216]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b80      	cmp	r3, #128	@ 0x80
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b72:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4a32      	ldr	r2, [pc, #200]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d21d      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 020f 	bic.w	r2, r3, #15
 8002b94:	4929      	ldr	r1, [pc, #164]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe face 	bl	800113c <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe faca 	bl	800113c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e03b      	b.n	8002c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1ed      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4917      	ldr	r1, [pc, #92]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490f      	ldr	r1, [pc, #60]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c06:	f000 f825 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490c      	ldr	r1, [pc, #48]	@ (8002c48 <HAL_RCC_ClockConfig+0x26c>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x270>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fa3a 	bl	80010a4 <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	04c4b400 	.word	0x04c4b400
 8002c48:	08004868 	.word	0x08004868
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000018 	.word	0x20000018

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e047      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c6c:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c78:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e03e      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c7e:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d136      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	4a16      	ldr	r2, [pc, #88]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb2:	68d2      	ldr	r2, [r2, #12]
 8002cb4:	0a12      	lsrs	r2, r2, #8
 8002cb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
      break;
 8002cc0:	e00c      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc2:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4a10      	ldr	r2, [pc, #64]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	0a12      	lsrs	r2, r2, #8
 8002cd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
      break;
 8002cda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0e5b      	lsrs	r3, r3, #25
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e001      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cfc:	693b      	ldr	r3, [r7, #16]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	016e3600 	.word	0x016e3600

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08004878 	.word	0x08004878

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004878 	.word	0x08004878

08002d88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3301      	adds	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d10c      	bne.n	8002dc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dac:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db6:	68d2      	ldr	r2, [r2, #12]
 8002db8:	0a12      	lsrs	r2, r2, #8
 8002dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	617b      	str	r3, [r7, #20]
    break;
 8002dc4:	e00c      	b.n	8002de0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	0a12      	lsrs	r2, r2, #8
 8002dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    break;
 8002dde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de0:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0e5b      	lsrs	r3, r3, #25
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002dfa:	687b      	ldr	r3, [r7, #4]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	016e3600 	.word	0x016e3600
 8002e10:	00f42400 	.word	0x00f42400

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8098 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b43      	ldr	r3, [pc, #268]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b40      	ldr	r3, [pc, #256]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	4a3f      	ldr	r2, [pc, #252]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a39      	ldr	r2, [pc, #228]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f967 	bl	800113c <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e70:	e009      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe f963 	bl	800113c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	74fb      	strb	r3, [r7, #19]
        break;
 8002e84:	e005      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e86:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ef      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d159      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e98:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01e      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d019      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec0:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f923 	bl	800113c <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f91f 	bl	800113c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d902      	bls.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ec      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f34:	4903      	ldr	r1, [pc, #12]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f3c:	e008      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
 8002f42:	e005      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f50:	7c7b      	ldrb	r3, [r7, #17]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4ba7      	ldr	r3, [pc, #668]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	4aa6      	ldr	r2, [pc, #664]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	499d      	ldr	r1, [pc, #628]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f90:	4b98      	ldr	r3, [pc, #608]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f023 020c 	bic.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4995      	ldr	r1, [pc, #596]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb2:	4b90      	ldr	r3, [pc, #576]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	498c      	ldr	r1, [pc, #560]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd4:	4b87      	ldr	r3, [pc, #540]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4984      	ldr	r1, [pc, #528]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	497b      	ldr	r1, [pc, #492]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003018:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4973      	ldr	r1, [pc, #460]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303a:	4b6e      	ldr	r3, [pc, #440]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	496a      	ldr	r1, [pc, #424]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800305c:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4962      	ldr	r1, [pc, #392]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800307e:	4b5d      	ldr	r3, [pc, #372]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	4959      	ldr	r1, [pc, #356]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030a0:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	4951      	ldr	r1, [pc, #324]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c2:	4b4c      	ldr	r3, [pc, #304]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	4948      	ldr	r1, [pc, #288]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e4:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4940      	ldr	r1, [pc, #256]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003102:	d105      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003104:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a3a      	ldr	r2, [pc, #232]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800310e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d015      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800311c:	4b35      	ldr	r3, [pc, #212]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003122:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	4932      	ldr	r1, [pc, #200]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313c:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003146:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003154:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	4924      	ldr	r1, [pc, #144]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a1e      	ldr	r2, [pc, #120]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800317e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	4916      	ldr	r1, [pc, #88]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031aa:	d105      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a10      	ldr	r2, [pc, #64]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d019      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	4908      	ldr	r1, [pc, #32]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e2:	d109      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a02      	ldr	r2, [pc, #8]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4926      	ldr	r1, [pc, #152]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003224:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a20      	ldr	r2, [pc, #128]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324a:	4918      	ldr	r1, [pc, #96]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003274:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800327a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	490a      	ldr	r1, [pc, #40]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003292:	d105      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800329a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800329e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e042      	b.n	8003348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f83b 	bl	8003350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	@ 0x24
 80032de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fbbc 	bl	8003a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8bd 	bl	8003480 <UART_SetConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e01b      	b.n	8003348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800331e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800332e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fc3b 	bl	8003bbc <UART_CheckIdleState>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	2b20      	cmp	r3, #32
 800337c:	d17b      	bne.n	8003476 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_UART_Transmit+0x26>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e074      	b.n	8003478 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	@ 0x21
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fd fecd 	bl	800113c <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033bc:	d108      	bne.n	80033d0 <HAL_UART_Transmit+0x6c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e003      	b.n	80033d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d8:	e030      	b.n	800343c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fc93 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e03d      	b.n	8003478 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3302      	adds	r3, #2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e007      	b.n	800342a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1c8      	bne.n	80033da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	2140      	movs	r1, #64	@ 0x40
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fc5c 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e006      	b.n	8003478 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b08c      	sub	sp, #48	@ 0x30
 8003486:	af00      	add	r7, sp, #0
 8003488:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4baa      	ldr	r3, [pc, #680]	@ (8003758 <UART_SetConfig+0x2d8>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a9f      	ldr	r2, [pc, #636]	@ (800375c <UART_SetConfig+0x2dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e8:	4313      	orrs	r3, r2
 80034ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003500:	430b      	orrs	r3, r1
 8003502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	f023 010f 	bic.w	r1, r3, #15
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a90      	ldr	r2, [pc, #576]	@ (8003760 <UART_SetConfig+0x2e0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0xf0>
 8003524:	4b8f      	ldr	r3, [pc, #572]	@ (8003764 <UART_SetConfig+0x2e4>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b03      	cmp	r3, #3
 8003530:	d81a      	bhi.n	8003568 <UART_SetConfig+0xe8>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <UART_SetConfig+0xb8>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003549 	.word	0x08003549
 800353c:	08003559 	.word	0x08003559
 8003540:	08003551 	.word	0x08003551
 8003544:	08003561 	.word	0x08003561
 8003548:	2301      	movs	r3, #1
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354e:	e116      	b.n	800377e <UART_SetConfig+0x2fe>
 8003550:	2302      	movs	r3, #2
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003556:	e112      	b.n	800377e <UART_SetConfig+0x2fe>
 8003558:	2304      	movs	r3, #4
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800355e:	e10e      	b.n	800377e <UART_SetConfig+0x2fe>
 8003560:	2308      	movs	r3, #8
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003566:	e10a      	b.n	800377e <UART_SetConfig+0x2fe>
 8003568:	2310      	movs	r3, #16
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800356e:	e106      	b.n	800377e <UART_SetConfig+0x2fe>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7c      	ldr	r2, [pc, #496]	@ (8003768 <UART_SetConfig+0x2e8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d138      	bne.n	80035ec <UART_SetConfig+0x16c>
 800357a:	4b7a      	ldr	r3, [pc, #488]	@ (8003764 <UART_SetConfig+0x2e4>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d82d      	bhi.n	80035e4 <UART_SetConfig+0x164>
 8003588:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <UART_SetConfig+0x110>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080035e5 	.word	0x080035e5
 800359c:	080035e5 	.word	0x080035e5
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	080035e5 	.word	0x080035e5
 80035a8:	080035e5 	.word	0x080035e5
 80035ac:	080035e5 	.word	0x080035e5
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	080035e5 	.word	0x080035e5
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	080035dd 	.word	0x080035dd
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ca:	e0d8      	b.n	800377e <UART_SetConfig+0x2fe>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035d2:	e0d4      	b.n	800377e <UART_SetConfig+0x2fe>
 80035d4:	2304      	movs	r3, #4
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035da:	e0d0      	b.n	800377e <UART_SetConfig+0x2fe>
 80035dc:	2308      	movs	r3, #8
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e2:	e0cc      	b.n	800377e <UART_SetConfig+0x2fe>
 80035e4:	2310      	movs	r3, #16
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	e0c8      	b.n	800377e <UART_SetConfig+0x2fe>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <UART_SetConfig+0x2ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d125      	bne.n	8003642 <UART_SetConfig+0x1c2>
 80035f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003764 <UART_SetConfig+0x2e4>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003600:	2b30      	cmp	r3, #48	@ 0x30
 8003602:	d016      	beq.n	8003632 <UART_SetConfig+0x1b2>
 8003604:	2b30      	cmp	r3, #48	@ 0x30
 8003606:	d818      	bhi.n	800363a <UART_SetConfig+0x1ba>
 8003608:	2b20      	cmp	r3, #32
 800360a:	d00a      	beq.n	8003622 <UART_SetConfig+0x1a2>
 800360c:	2b20      	cmp	r3, #32
 800360e:	d814      	bhi.n	800363a <UART_SetConfig+0x1ba>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <UART_SetConfig+0x19a>
 8003614:	2b10      	cmp	r3, #16
 8003616:	d008      	beq.n	800362a <UART_SetConfig+0x1aa>
 8003618:	e00f      	b.n	800363a <UART_SetConfig+0x1ba>
 800361a:	2300      	movs	r3, #0
 800361c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003620:	e0ad      	b.n	800377e <UART_SetConfig+0x2fe>
 8003622:	2302      	movs	r3, #2
 8003624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003628:	e0a9      	b.n	800377e <UART_SetConfig+0x2fe>
 800362a:	2304      	movs	r3, #4
 800362c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003630:	e0a5      	b.n	800377e <UART_SetConfig+0x2fe>
 8003632:	2308      	movs	r3, #8
 8003634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003638:	e0a1      	b.n	800377e <UART_SetConfig+0x2fe>
 800363a:	2310      	movs	r3, #16
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003640:	e09d      	b.n	800377e <UART_SetConfig+0x2fe>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4a      	ldr	r2, [pc, #296]	@ (8003770 <UART_SetConfig+0x2f0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d125      	bne.n	8003698 <UART_SetConfig+0x218>
 800364c:	4b45      	ldr	r3, [pc, #276]	@ (8003764 <UART_SetConfig+0x2e4>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003656:	2bc0      	cmp	r3, #192	@ 0xc0
 8003658:	d016      	beq.n	8003688 <UART_SetConfig+0x208>
 800365a:	2bc0      	cmp	r3, #192	@ 0xc0
 800365c:	d818      	bhi.n	8003690 <UART_SetConfig+0x210>
 800365e:	2b80      	cmp	r3, #128	@ 0x80
 8003660:	d00a      	beq.n	8003678 <UART_SetConfig+0x1f8>
 8003662:	2b80      	cmp	r3, #128	@ 0x80
 8003664:	d814      	bhi.n	8003690 <UART_SetConfig+0x210>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <UART_SetConfig+0x1f0>
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d008      	beq.n	8003680 <UART_SetConfig+0x200>
 800366e:	e00f      	b.n	8003690 <UART_SetConfig+0x210>
 8003670:	2300      	movs	r3, #0
 8003672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003676:	e082      	b.n	800377e <UART_SetConfig+0x2fe>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800367e:	e07e      	b.n	800377e <UART_SetConfig+0x2fe>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003686:	e07a      	b.n	800377e <UART_SetConfig+0x2fe>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368e:	e076      	b.n	800377e <UART_SetConfig+0x2fe>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e072      	b.n	800377e <UART_SetConfig+0x2fe>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <UART_SetConfig+0x2f4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12a      	bne.n	80036f8 <UART_SetConfig+0x278>
 80036a2:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <UART_SetConfig+0x2e4>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b0:	d01a      	beq.n	80036e8 <UART_SetConfig+0x268>
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0x270>
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036bc:	d00c      	beq.n	80036d8 <UART_SetConfig+0x258>
 80036be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c2:	d815      	bhi.n	80036f0 <UART_SetConfig+0x270>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <UART_SetConfig+0x250>
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036cc:	d008      	beq.n	80036e0 <UART_SetConfig+0x260>
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x270>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d6:	e052      	b.n	800377e <UART_SetConfig+0x2fe>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036de:	e04e      	b.n	800377e <UART_SetConfig+0x2fe>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e6:	e04a      	b.n	800377e <UART_SetConfig+0x2fe>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ee:	e046      	b.n	800377e <UART_SetConfig+0x2fe>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e042      	b.n	800377e <UART_SetConfig+0x2fe>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <UART_SetConfig+0x2dc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d13a      	bne.n	8003778 <UART_SetConfig+0x2f8>
 8003702:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <UART_SetConfig+0x2e4>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800370c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003710:	d01a      	beq.n	8003748 <UART_SetConfig+0x2c8>
 8003712:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003716:	d81b      	bhi.n	8003750 <UART_SetConfig+0x2d0>
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800371c:	d00c      	beq.n	8003738 <UART_SetConfig+0x2b8>
 800371e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003722:	d815      	bhi.n	8003750 <UART_SetConfig+0x2d0>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <UART_SetConfig+0x2b0>
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372c:	d008      	beq.n	8003740 <UART_SetConfig+0x2c0>
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x2d0>
 8003730:	2300      	movs	r3, #0
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003736:	e022      	b.n	800377e <UART_SetConfig+0x2fe>
 8003738:	2302      	movs	r3, #2
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800373e:	e01e      	b.n	800377e <UART_SetConfig+0x2fe>
 8003740:	2304      	movs	r3, #4
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e01a      	b.n	800377e <UART_SetConfig+0x2fe>
 8003748:	2308      	movs	r3, #8
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e016      	b.n	800377e <UART_SetConfig+0x2fe>
 8003750:	2310      	movs	r3, #16
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e012      	b.n	800377e <UART_SetConfig+0x2fe>
 8003758:	cfff69f3 	.word	0xcfff69f3
 800375c:	40008000 	.word	0x40008000
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40004400 	.word	0x40004400
 800376c:	40004800 	.word	0x40004800
 8003770:	40004c00 	.word	0x40004c00
 8003774:	40005000 	.word	0x40005000
 8003778:	2310      	movs	r3, #16
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4aae      	ldr	r2, [pc, #696]	@ (8003a3c <UART_SetConfig+0x5bc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 8097 	bne.w	80038b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800378a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800378e:	2b08      	cmp	r3, #8
 8003790:	d823      	bhi.n	80037da <UART_SetConfig+0x35a>
 8003792:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <UART_SetConfig+0x318>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037cb 	.word	0x080037cb
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037db 	.word	0x080037db
 80037b8:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7ff fab8 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80037c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037c2:	e010      	b.n	80037e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b9e      	ldr	r3, [pc, #632]	@ (8003a40 <UART_SetConfig+0x5c0>)
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7ff fa43 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80037ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d0:	e009      	b.n	80037e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037d8:	e005      	b.n	80037e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8130 	beq.w	8003a4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	4a94      	ldr	r2, [pc, #592]	@ (8003a44 <UART_SetConfig+0x5c4>)
 80037f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003800:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	429a      	cmp	r2, r3
 8003810:	d305      	bcc.n	800381e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	429a      	cmp	r2, r3
 800381c:	d903      	bls.n	8003826 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003824:	e113      	b.n	8003a4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2200      	movs	r2, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	60fa      	str	r2, [r7, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	4a84      	ldr	r2, [pc, #528]	@ (8003a44 <UART_SetConfig+0x5c4>)
 8003834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003838:	b29b      	uxth	r3, r3
 800383a:	2200      	movs	r2, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003848:	f7fc fd42 	bl	80002d0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	020b      	lsls	r3, r1, #8
 800385e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003862:	0202      	lsls	r2, r0, #8
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	6849      	ldr	r1, [r1, #4]
 8003868:	0849      	lsrs	r1, r1, #1
 800386a:	2000      	movs	r0, #0
 800386c:	460c      	mov	r4, r1
 800386e:	4605      	mov	r5, r0
 8003870:	eb12 0804 	adds.w	r8, r2, r4
 8003874:	eb43 0905 	adc.w	r9, r3, r5
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	469a      	mov	sl, r3
 8003880:	4693      	mov	fp, r2
 8003882:	4652      	mov	r2, sl
 8003884:	465b      	mov	r3, fp
 8003886:	4640      	mov	r0, r8
 8003888:	4649      	mov	r1, r9
 800388a:	f7fc fd21 	bl	80002d0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4613      	mov	r3, r2
 8003894:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800389c:	d308      	bcc.n	80038b0 <UART_SetConfig+0x430>
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a4:	d204      	bcs.n	80038b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e0ce      	b.n	8003a4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038b6:	e0ca      	b.n	8003a4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c0:	d166      	bne.n	8003990 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d827      	bhi.n	800391a <UART_SetConfig+0x49a>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <UART_SetConfig+0x450>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	08003905 	.word	0x08003905
 80038dc:	0800391b 	.word	0x0800391b
 80038e0:	0800390b 	.word	0x0800390b
 80038e4:	0800391b 	.word	0x0800391b
 80038e8:	0800391b 	.word	0x0800391b
 80038ec:	0800391b 	.word	0x0800391b
 80038f0:	08003913 	.word	0x08003913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f4:	f7ff fa1c 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80038f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038fa:	e014      	b.n	8003926 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff fa2e 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003902:	e010      	b.n	8003926 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003904:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <UART_SetConfig+0x5c0>)
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003908:	e00d      	b.n	8003926 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390a:	f7ff f9a3 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 800390e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003910:	e009      	b.n	8003926 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003918:	e005      	b.n	8003926 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8090 	beq.w	8003a4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	4a44      	ldr	r2, [pc, #272]	@ (8003a44 <UART_SetConfig+0x5c4>)
 8003934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003938:	461a      	mov	r2, r3
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003940:	005a      	lsls	r2, r3, #1
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	441a      	add	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	d916      	bls.n	8003988 <UART_SetConfig+0x508>
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003960:	d212      	bcs.n	8003988 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f023 030f 	bic.w	r3, r3, #15
 800396a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	b29b      	uxth	r3, r3
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	b29a      	uxth	r2, r3
 8003978:	8bfb      	ldrh	r3, [r7, #30]
 800397a:	4313      	orrs	r3, r2
 800397c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	8bfa      	ldrh	r2, [r7, #30]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e062      	b.n	8003a4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800398e:	e05e      	b.n	8003a4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003990:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003994:	2b08      	cmp	r3, #8
 8003996:	d828      	bhi.n	80039ea <UART_SetConfig+0x56a>
 8003998:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <UART_SetConfig+0x520>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039cd 	.word	0x080039cd
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039eb 	.word	0x080039eb
 80039b0:	080039db 	.word	0x080039db
 80039b4:	080039eb 	.word	0x080039eb
 80039b8:	080039eb 	.word	0x080039eb
 80039bc:	080039eb 	.word	0x080039eb
 80039c0:	080039e3 	.word	0x080039e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7ff f9b4 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80039c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ca:	e014      	b.n	80039f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039cc:	f7ff f9c6 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d2:	e010      	b.n	80039f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <UART_SetConfig+0x5c0>)
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d8:	e00d      	b.n	80039f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039da:	f7ff f93b 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80039de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e0:	e009      	b.n	80039f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e8:	e005      	b.n	80039f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039f4:	bf00      	nop
    }

    if (pclk != 0U)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d028      	beq.n	8003a4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	4a10      	ldr	r2, [pc, #64]	@ (8003a44 <UART_SetConfig+0x5c4>)
 8003a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	441a      	add	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	d910      	bls.n	8003a48 <UART_SetConfig+0x5c8>
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2c:	d20c      	bcs.n	8003a48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e009      	b.n	8003a4e <UART_SetConfig+0x5ce>
 8003a3a:	bf00      	nop
 8003a3c:	40008000 	.word	0x40008000
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	08004884 	.word	0x08004884
      }
      else
      {
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3730      	adds	r7, #48	@ 0x30
 8003a72:	46bd      	mov	sp, r7
 8003a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b76:	d10a      	bne.n	8003b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b098      	sub	sp, #96	@ 0x60
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bcc:	f7fd fab6 	bl	800113c <HAL_GetTick>
 8003bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d12f      	bne.n	8003c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f88e 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d022      	beq.n	8003c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e063      	b.n	8003d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d149      	bne.n	8003ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	2200      	movs	r2, #0
 8003c58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f857 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03c      	beq.n	8003ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	623b      	str	r3, [r7, #32]
   return(result);
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e6      	bne.n	8003c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cba:	61fa      	str	r2, [r7, #28]
 8003cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e012      	b.n	8003d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3758      	adds	r7, #88	@ 0x58
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	e04f      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d28:	d04b      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd fa07 	bl	800113c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e04e      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d037      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b80      	cmp	r3, #128	@ 0x80
 8003d56:	d034      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d031      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d110      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f838 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e029      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9c:	d111      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f81e 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0a0      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b095      	sub	sp, #84	@ 0x54
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e3      	bne.n	8003e24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d118      	bne.n	8003e96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003eaa:	bf00      	nop
 8003eac:	3754      	adds	r7, #84	@ 0x54
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <sniprintf>:
 8003eb8:	b40c      	push	{r2, r3}
 8003eba:	b530      	push	{r4, r5, lr}
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <sniprintf+0x68>)
 8003ebe:	1e0c      	subs	r4, r1, #0
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	b09d      	sub	sp, #116	@ 0x74
 8003ec4:	da08      	bge.n	8003ed8 <sniprintf+0x20>
 8003ec6:	238b      	movs	r3, #139	@ 0x8b
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ece:	b01d      	add	sp, #116	@ 0x74
 8003ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ed4:	b002      	add	sp, #8
 8003ed6:	4770      	bx	lr
 8003ed8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003ee6:	bf14      	ite	ne
 8003ee8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003eec:	4623      	moveq	r3, r4
 8003eee:	9304      	str	r3, [sp, #16]
 8003ef0:	9307      	str	r3, [sp, #28]
 8003ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ef6:	9002      	str	r0, [sp, #8]
 8003ef8:	9006      	str	r0, [sp, #24]
 8003efa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003efe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f00:	ab21      	add	r3, sp, #132	@ 0x84
 8003f02:	a902      	add	r1, sp, #8
 8003f04:	4628      	mov	r0, r5
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	f000 f994 	bl	8004234 <_svfiprintf_r>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	bfbc      	itt	lt
 8003f10:	238b      	movlt	r3, #139	@ 0x8b
 8003f12:	602b      	strlt	r3, [r5, #0]
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	d0da      	beq.n	8003ece <sniprintf+0x16>
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e7d6      	b.n	8003ece <sniprintf+0x16>
 8003f20:	20000020 	.word	0x20000020

08003f24 <memset>:
 8003f24:	4402      	add	r2, r0
 8003f26:	4603      	mov	r3, r0
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d100      	bne.n	8003f2e <memset+0xa>
 8003f2c:	4770      	bx	lr
 8003f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f32:	e7f9      	b.n	8003f28 <memset+0x4>

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	@ (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000020 	.word	0x20000020

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4d0d      	ldr	r5, [pc, #52]	@ (8003f78 <__libc_init_array+0x38>)
 8003f44:	4c0d      	ldr	r4, [pc, #52]	@ (8003f7c <__libc_init_array+0x3c>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	4d0b      	ldr	r5, [pc, #44]	@ (8003f80 <__libc_init_array+0x40>)
 8003f52:	4c0c      	ldr	r4, [pc, #48]	@ (8003f84 <__libc_init_array+0x44>)
 8003f54:	f000 fc64 	bl	8004820 <_init>
 8003f58:	1b64      	subs	r4, r4, r5
 8003f5a:	10a4      	asrs	r4, r4, #2
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	080048d8 	.word	0x080048d8
 8003f7c:	080048d8 	.word	0x080048d8
 8003f80:	080048d8 	.word	0x080048d8
 8003f84:	080048dc 	.word	0x080048dc

08003f88 <__retarget_lock_acquire_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_release_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <_free_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4605      	mov	r5, r0
 8003f90:	2900      	cmp	r1, #0
 8003f92:	d041      	beq.n	8004018 <_free_r+0x8c>
 8003f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f98:	1f0c      	subs	r4, r1, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bfb8      	it	lt
 8003f9e:	18e4      	addlt	r4, r4, r3
 8003fa0:	f000 f8e0 	bl	8004164 <__malloc_lock>
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800401c <_free_r+0x90>)
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	b933      	cbnz	r3, 8003fb8 <_free_r+0x2c>
 8003faa:	6063      	str	r3, [r4, #4]
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	4628      	mov	r0, r5
 8003fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fb4:	f000 b8dc 	b.w	8004170 <__malloc_unlock>
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	d908      	bls.n	8003fce <_free_r+0x42>
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	1821      	adds	r1, r4, r0
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	bf01      	itttt	eq
 8003fc4:	6819      	ldreq	r1, [r3, #0]
 8003fc6:	685b      	ldreq	r3, [r3, #4]
 8003fc8:	1809      	addeq	r1, r1, r0
 8003fca:	6021      	streq	r1, [r4, #0]
 8003fcc:	e7ed      	b.n	8003faa <_free_r+0x1e>
 8003fce:	461a      	mov	r2, r3
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b10b      	cbz	r3, 8003fd8 <_free_r+0x4c>
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	d9fa      	bls.n	8003fce <_free_r+0x42>
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	1850      	adds	r0, r2, r1
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d10b      	bne.n	8003ff8 <_free_r+0x6c>
 8003fe0:	6820      	ldr	r0, [r4, #0]
 8003fe2:	4401      	add	r1, r0
 8003fe4:	1850      	adds	r0, r2, r1
 8003fe6:	4283      	cmp	r3, r0
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	d1e0      	bne.n	8003fae <_free_r+0x22>
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6053      	str	r3, [r2, #4]
 8003ff2:	4408      	add	r0, r1
 8003ff4:	6010      	str	r0, [r2, #0]
 8003ff6:	e7da      	b.n	8003fae <_free_r+0x22>
 8003ff8:	d902      	bls.n	8004000 <_free_r+0x74>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	e7d6      	b.n	8003fae <_free_r+0x22>
 8004000:	6820      	ldr	r0, [r4, #0]
 8004002:	1821      	adds	r1, r4, r0
 8004004:	428b      	cmp	r3, r1
 8004006:	bf04      	itt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	bf04      	itt	eq
 8004010:	1809      	addeq	r1, r1, r0
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	6054      	str	r4, [r2, #4]
 8004016:	e7ca      	b.n	8003fae <_free_r+0x22>
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	200002e4 	.word	0x200002e4

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0f      	ldr	r6, [pc, #60]	@ (8004060 <sbrk_aligned+0x40>)
 8004024:	460c      	mov	r4, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	4605      	mov	r5, r0
 800402a:	b911      	cbnz	r1, 8004032 <sbrk_aligned+0x12>
 800402c:	f000 fba4 	bl	8004778 <_sbrk_r>
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 fb9f 	bl	8004778 <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d103      	bne.n	8004046 <sbrk_aligned+0x26>
 800403e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004042:	4620      	mov	r0, r4
 8004044:	bd70      	pop	{r4, r5, r6, pc}
 8004046:	1cc4      	adds	r4, r0, #3
 8004048:	f024 0403 	bic.w	r4, r4, #3
 800404c:	42a0      	cmp	r0, r4
 800404e:	d0f8      	beq.n	8004042 <sbrk_aligned+0x22>
 8004050:	1a21      	subs	r1, r4, r0
 8004052:	4628      	mov	r0, r5
 8004054:	f000 fb90 	bl	8004778 <_sbrk_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d1f2      	bne.n	8004042 <sbrk_aligned+0x22>
 800405c:	e7ef      	b.n	800403e <sbrk_aligned+0x1e>
 800405e:	bf00      	nop
 8004060:	200002e0 	.word	0x200002e0

08004064 <_malloc_r>:
 8004064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004068:	1ccd      	adds	r5, r1, #3
 800406a:	f025 0503 	bic.w	r5, r5, #3
 800406e:	3508      	adds	r5, #8
 8004070:	2d0c      	cmp	r5, #12
 8004072:	bf38      	it	cc
 8004074:	250c      	movcc	r5, #12
 8004076:	2d00      	cmp	r5, #0
 8004078:	4606      	mov	r6, r0
 800407a:	db01      	blt.n	8004080 <_malloc_r+0x1c>
 800407c:	42a9      	cmp	r1, r5
 800407e:	d904      	bls.n	800408a <_malloc_r+0x26>
 8004080:	230c      	movs	r3, #12
 8004082:	6033      	str	r3, [r6, #0]
 8004084:	2000      	movs	r0, #0
 8004086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004160 <_malloc_r+0xfc>
 800408e:	f000 f869 	bl	8004164 <__malloc_lock>
 8004092:	f8d8 3000 	ldr.w	r3, [r8]
 8004096:	461c      	mov	r4, r3
 8004098:	bb44      	cbnz	r4, 80040ec <_malloc_r+0x88>
 800409a:	4629      	mov	r1, r5
 800409c:	4630      	mov	r0, r6
 800409e:	f7ff ffbf 	bl	8004020 <sbrk_aligned>
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	4604      	mov	r4, r0
 80040a6:	d158      	bne.n	800415a <_malloc_r+0xf6>
 80040a8:	f8d8 4000 	ldr.w	r4, [r8]
 80040ac:	4627      	mov	r7, r4
 80040ae:	2f00      	cmp	r7, #0
 80040b0:	d143      	bne.n	800413a <_malloc_r+0xd6>
 80040b2:	2c00      	cmp	r4, #0
 80040b4:	d04b      	beq.n	800414e <_malloc_r+0xea>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	4639      	mov	r1, r7
 80040ba:	4630      	mov	r0, r6
 80040bc:	eb04 0903 	add.w	r9, r4, r3
 80040c0:	f000 fb5a 	bl	8004778 <_sbrk_r>
 80040c4:	4581      	cmp	r9, r0
 80040c6:	d142      	bne.n	800414e <_malloc_r+0xea>
 80040c8:	6821      	ldr	r1, [r4, #0]
 80040ca:	1a6d      	subs	r5, r5, r1
 80040cc:	4629      	mov	r1, r5
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7ff ffa6 	bl	8004020 <sbrk_aligned>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d03a      	beq.n	800414e <_malloc_r+0xea>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	442b      	add	r3, r5
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	f8d8 3000 	ldr.w	r3, [r8]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	bb62      	cbnz	r2, 8004140 <_malloc_r+0xdc>
 80040e6:	f8c8 7000 	str.w	r7, [r8]
 80040ea:	e00f      	b.n	800410c <_malloc_r+0xa8>
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	1b52      	subs	r2, r2, r5
 80040f0:	d420      	bmi.n	8004134 <_malloc_r+0xd0>
 80040f2:	2a0b      	cmp	r2, #11
 80040f4:	d917      	bls.n	8004126 <_malloc_r+0xc2>
 80040f6:	1961      	adds	r1, r4, r5
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	6025      	str	r5, [r4, #0]
 80040fc:	bf18      	it	ne
 80040fe:	6059      	strne	r1, [r3, #4]
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	bf08      	it	eq
 8004104:	f8c8 1000 	streq.w	r1, [r8]
 8004108:	5162      	str	r2, [r4, r5]
 800410a:	604b      	str	r3, [r1, #4]
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f82f 	bl	8004170 <__malloc_unlock>
 8004112:	f104 000b 	add.w	r0, r4, #11
 8004116:	1d23      	adds	r3, r4, #4
 8004118:	f020 0007 	bic.w	r0, r0, #7
 800411c:	1ac2      	subs	r2, r0, r3
 800411e:	bf1c      	itt	ne
 8004120:	1a1b      	subne	r3, r3, r0
 8004122:	50a3      	strne	r3, [r4, r2]
 8004124:	e7af      	b.n	8004086 <_malloc_r+0x22>
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	42a3      	cmp	r3, r4
 800412a:	bf0c      	ite	eq
 800412c:	f8c8 2000 	streq.w	r2, [r8]
 8004130:	605a      	strne	r2, [r3, #4]
 8004132:	e7eb      	b.n	800410c <_malloc_r+0xa8>
 8004134:	4623      	mov	r3, r4
 8004136:	6864      	ldr	r4, [r4, #4]
 8004138:	e7ae      	b.n	8004098 <_malloc_r+0x34>
 800413a:	463c      	mov	r4, r7
 800413c:	687f      	ldr	r7, [r7, #4]
 800413e:	e7b6      	b.n	80040ae <_malloc_r+0x4a>
 8004140:	461a      	mov	r2, r3
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	42a3      	cmp	r3, r4
 8004146:	d1fb      	bne.n	8004140 <_malloc_r+0xdc>
 8004148:	2300      	movs	r3, #0
 800414a:	6053      	str	r3, [r2, #4]
 800414c:	e7de      	b.n	800410c <_malloc_r+0xa8>
 800414e:	230c      	movs	r3, #12
 8004150:	6033      	str	r3, [r6, #0]
 8004152:	4630      	mov	r0, r6
 8004154:	f000 f80c 	bl	8004170 <__malloc_unlock>
 8004158:	e794      	b.n	8004084 <_malloc_r+0x20>
 800415a:	6005      	str	r5, [r0, #0]
 800415c:	e7d6      	b.n	800410c <_malloc_r+0xa8>
 800415e:	bf00      	nop
 8004160:	200002e4 	.word	0x200002e4

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__malloc_lock+0x8>)
 8004166:	f7ff bf0f 	b.w	8003f88 <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	200002dc 	.word	0x200002dc

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	@ (8004178 <__malloc_unlock+0x8>)
 8004172:	f7ff bf0a 	b.w	8003f8a <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	200002dc 	.word	0x200002dc

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688e      	ldr	r6, [r1, #8]
 8004182:	461f      	mov	r7, r3
 8004184:	42be      	cmp	r6, r7
 8004186:	680b      	ldr	r3, [r1, #0]
 8004188:	4682      	mov	sl, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4690      	mov	r8, r2
 800418e:	d82d      	bhi.n	80041ec <__ssputs_r+0x70>
 8004190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004198:	d026      	beq.n	80041e8 <__ssputs_r+0x6c>
 800419a:	6965      	ldr	r5, [r4, #20]
 800419c:	6909      	ldr	r1, [r1, #16]
 800419e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a2:	eba3 0901 	sub.w	r9, r3, r1
 80041a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041aa:	1c7b      	adds	r3, r7, #1
 80041ac:	444b      	add	r3, r9
 80041ae:	106d      	asrs	r5, r5, #1
 80041b0:	429d      	cmp	r5, r3
 80041b2:	bf38      	it	cc
 80041b4:	461d      	movcc	r5, r3
 80041b6:	0553      	lsls	r3, r2, #21
 80041b8:	d527      	bpl.n	800420a <__ssputs_r+0x8e>
 80041ba:	4629      	mov	r1, r5
 80041bc:	f7ff ff52 	bl	8004064 <_malloc_r>
 80041c0:	4606      	mov	r6, r0
 80041c2:	b360      	cbz	r0, 800421e <__ssputs_r+0xa2>
 80041c4:	6921      	ldr	r1, [r4, #16]
 80041c6:	464a      	mov	r2, r9
 80041c8:	f000 fae6 	bl	8004798 <memcpy>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	6126      	str	r6, [r4, #16]
 80041da:	6165      	str	r5, [r4, #20]
 80041dc:	444e      	add	r6, r9
 80041de:	eba5 0509 	sub.w	r5, r5, r9
 80041e2:	6026      	str	r6, [r4, #0]
 80041e4:	60a5      	str	r5, [r4, #8]
 80041e6:	463e      	mov	r6, r7
 80041e8:	42be      	cmp	r6, r7
 80041ea:	d900      	bls.n	80041ee <__ssputs_r+0x72>
 80041ec:	463e      	mov	r6, r7
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	4632      	mov	r2, r6
 80041f2:	4641      	mov	r1, r8
 80041f4:	f000 faa6 	bl	8004744 <memmove>
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	1b9b      	subs	r3, r3, r6
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	4433      	add	r3, r6
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	2000      	movs	r0, #0
 8004206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420a:	462a      	mov	r2, r5
 800420c:	f000 fad2 	bl	80047b4 <_realloc_r>
 8004210:	4606      	mov	r6, r0
 8004212:	2800      	cmp	r0, #0
 8004214:	d1e0      	bne.n	80041d8 <__ssputs_r+0x5c>
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	4650      	mov	r0, sl
 800421a:	f7ff feb7 	bl	8003f8c <_free_r>
 800421e:	230c      	movs	r3, #12
 8004220:	f8ca 3000 	str.w	r3, [sl]
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004230:	e7e9      	b.n	8004206 <__ssputs_r+0x8a>
	...

08004234 <_svfiprintf_r>:
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	4698      	mov	r8, r3
 800423a:	898b      	ldrh	r3, [r1, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	b09d      	sub	sp, #116	@ 0x74
 8004240:	4607      	mov	r7, r0
 8004242:	460d      	mov	r5, r1
 8004244:	4614      	mov	r4, r2
 8004246:	d510      	bpl.n	800426a <_svfiprintf_r+0x36>
 8004248:	690b      	ldr	r3, [r1, #16]
 800424a:	b973      	cbnz	r3, 800426a <_svfiprintf_r+0x36>
 800424c:	2140      	movs	r1, #64	@ 0x40
 800424e:	f7ff ff09 	bl	8004064 <_malloc_r>
 8004252:	6028      	str	r0, [r5, #0]
 8004254:	6128      	str	r0, [r5, #16]
 8004256:	b930      	cbnz	r0, 8004266 <_svfiprintf_r+0x32>
 8004258:	230c      	movs	r3, #12
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004260:	b01d      	add	sp, #116	@ 0x74
 8004262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004266:	2340      	movs	r3, #64	@ 0x40
 8004268:	616b      	str	r3, [r5, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	9309      	str	r3, [sp, #36]	@ 0x24
 800426e:	2320      	movs	r3, #32
 8004270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004274:	f8cd 800c 	str.w	r8, [sp, #12]
 8004278:	2330      	movs	r3, #48	@ 0x30
 800427a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004418 <_svfiprintf_r+0x1e4>
 800427e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004282:	f04f 0901 	mov.w	r9, #1
 8004286:	4623      	mov	r3, r4
 8004288:	469a      	mov	sl, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b10a      	cbz	r2, 8004294 <_svfiprintf_r+0x60>
 8004290:	2a25      	cmp	r2, #37	@ 0x25
 8004292:	d1f9      	bne.n	8004288 <_svfiprintf_r+0x54>
 8004294:	ebba 0b04 	subs.w	fp, sl, r4
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x7e>
 800429a:	465b      	mov	r3, fp
 800429c:	4622      	mov	r2, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff6b 	bl	800417c <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80a7 	beq.w	80043fa <_svfiprintf_r+0x1c6>
 80042ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ae:	445a      	add	r2, fp
 80042b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 809f 	beq.w	80043fa <_svfiprintf_r+0x1c6>
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c6:	f10a 0a01 	add.w	sl, sl, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80042d4:	4654      	mov	r4, sl
 80042d6:	2205      	movs	r2, #5
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	484e      	ldr	r0, [pc, #312]	@ (8004418 <_svfiprintf_r+0x1e4>)
 80042de:	f7fb ffa7 	bl	8000230 <memchr>
 80042e2:	9a04      	ldr	r2, [sp, #16]
 80042e4:	b9d8      	cbnz	r0, 800431e <_svfiprintf_r+0xea>
 80042e6:	06d0      	lsls	r0, r2, #27
 80042e8:	bf44      	itt	mi
 80042ea:	2320      	movmi	r3, #32
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f0:	0711      	lsls	r1, r2, #28
 80042f2:	bf44      	itt	mi
 80042f4:	232b      	movmi	r3, #43	@ 0x2b
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042fa:	f89a 3000 	ldrb.w	r3, [sl]
 80042fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004300:	d015      	beq.n	800432e <_svfiprintf_r+0xfa>
 8004302:	9a07      	ldr	r2, [sp, #28]
 8004304:	4654      	mov	r4, sl
 8004306:	2000      	movs	r0, #0
 8004308:	f04f 0c0a 	mov.w	ip, #10
 800430c:	4621      	mov	r1, r4
 800430e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004312:	3b30      	subs	r3, #48	@ 0x30
 8004314:	2b09      	cmp	r3, #9
 8004316:	d94b      	bls.n	80043b0 <_svfiprintf_r+0x17c>
 8004318:	b1b0      	cbz	r0, 8004348 <_svfiprintf_r+0x114>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e014      	b.n	8004348 <_svfiprintf_r+0x114>
 800431e:	eba0 0308 	sub.w	r3, r0, r8
 8004322:	fa09 f303 	lsl.w	r3, r9, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	46a2      	mov	sl, r4
 800432c:	e7d2      	b.n	80042d4 <_svfiprintf_r+0xa0>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	9103      	str	r1, [sp, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbb      	ittet	lt
 800433a:	425b      	neglt	r3, r3
 800433c:	f042 0202 	orrlt.w	r2, r2, #2
 8004340:	9307      	strge	r3, [sp, #28]
 8004342:	9307      	strlt	r3, [sp, #28]
 8004344:	bfb8      	it	lt
 8004346:	9204      	strlt	r2, [sp, #16]
 8004348:	7823      	ldrb	r3, [r4, #0]
 800434a:	2b2e      	cmp	r3, #46	@ 0x2e
 800434c:	d10a      	bne.n	8004364 <_svfiprintf_r+0x130>
 800434e:	7863      	ldrb	r3, [r4, #1]
 8004350:	2b2a      	cmp	r3, #42	@ 0x2a
 8004352:	d132      	bne.n	80043ba <_svfiprintf_r+0x186>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	9203      	str	r2, [sp, #12]
 800435c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004360:	3402      	adds	r4, #2
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004428 <_svfiprintf_r+0x1f4>
 8004368:	7821      	ldrb	r1, [r4, #0]
 800436a:	2203      	movs	r2, #3
 800436c:	4650      	mov	r0, sl
 800436e:	f7fb ff5f 	bl	8000230 <memchr>
 8004372:	b138      	cbz	r0, 8004384 <_svfiprintf_r+0x150>
 8004374:	9b04      	ldr	r3, [sp, #16]
 8004376:	eba0 000a 	sub.w	r0, r0, sl
 800437a:	2240      	movs	r2, #64	@ 0x40
 800437c:	4082      	lsls	r2, r0
 800437e:	4313      	orrs	r3, r2
 8004380:	3401      	adds	r4, #1
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004388:	4824      	ldr	r0, [pc, #144]	@ (800441c <_svfiprintf_r+0x1e8>)
 800438a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800438e:	2206      	movs	r2, #6
 8004390:	f7fb ff4e 	bl	8000230 <memchr>
 8004394:	2800      	cmp	r0, #0
 8004396:	d036      	beq.n	8004406 <_svfiprintf_r+0x1d2>
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <_svfiprintf_r+0x1ec>)
 800439a:	bb1b      	cbnz	r3, 80043e4 <_svfiprintf_r+0x1b0>
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	3307      	adds	r3, #7
 80043a0:	f023 0307 	bic.w	r3, r3, #7
 80043a4:	3308      	adds	r3, #8
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043aa:	4433      	add	r3, r6
 80043ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ae:	e76a      	b.n	8004286 <_svfiprintf_r+0x52>
 80043b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b4:	460c      	mov	r4, r1
 80043b6:	2001      	movs	r0, #1
 80043b8:	e7a8      	b.n	800430c <_svfiprintf_r+0xd8>
 80043ba:	2300      	movs	r3, #0
 80043bc:	3401      	adds	r4, #1
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0c0a 	mov.w	ip, #10
 80043c6:	4620      	mov	r0, r4
 80043c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043cc:	3a30      	subs	r2, #48	@ 0x30
 80043ce:	2a09      	cmp	r2, #9
 80043d0:	d903      	bls.n	80043da <_svfiprintf_r+0x1a6>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0c6      	beq.n	8004364 <_svfiprintf_r+0x130>
 80043d6:	9105      	str	r1, [sp, #20]
 80043d8:	e7c4      	b.n	8004364 <_svfiprintf_r+0x130>
 80043da:	fb0c 2101 	mla	r1, ip, r1, r2
 80043de:	4604      	mov	r4, r0
 80043e0:	2301      	movs	r3, #1
 80043e2:	e7f0      	b.n	80043c6 <_svfiprintf_r+0x192>
 80043e4:	ab03      	add	r3, sp, #12
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	462a      	mov	r2, r5
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <_svfiprintf_r+0x1f0>)
 80043ec:	a904      	add	r1, sp, #16
 80043ee:	4638      	mov	r0, r7
 80043f0:	f3af 8000 	nop.w
 80043f4:	1c42      	adds	r2, r0, #1
 80043f6:	4606      	mov	r6, r0
 80043f8:	d1d6      	bne.n	80043a8 <_svfiprintf_r+0x174>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	065b      	lsls	r3, r3, #25
 80043fe:	f53f af2d 	bmi.w	800425c <_svfiprintf_r+0x28>
 8004402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004404:	e72c      	b.n	8004260 <_svfiprintf_r+0x2c>
 8004406:	ab03      	add	r3, sp, #12
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	462a      	mov	r2, r5
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <_svfiprintf_r+0x1f0>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	4638      	mov	r0, r7
 8004412:	f000 f879 	bl	8004508 <_printf_i>
 8004416:	e7ed      	b.n	80043f4 <_svfiprintf_r+0x1c0>
 8004418:	0800489c 	.word	0x0800489c
 800441c:	080048a6 	.word	0x080048a6
 8004420:	00000000 	.word	0x00000000
 8004424:	0800417d 	.word	0x0800417d
 8004428:	080048a2 	.word	0x080048a2

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4616      	mov	r6, r2
 8004432:	4698      	mov	r8, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800443c:	4293      	cmp	r3, r2
 800443e:	bfb8      	it	lt
 8004440:	4613      	movlt	r3, r2
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004448:	4607      	mov	r7, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b10a      	cbz	r2, 8004452 <_printf_common+0x26>
 800444e:	3301      	adds	r3, #1
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	0699      	lsls	r1, r3, #26
 8004456:	bf42      	ittt	mi
 8004458:	6833      	ldrmi	r3, [r6, #0]
 800445a:	3302      	addmi	r3, #2
 800445c:	6033      	strmi	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	f015 0506 	ands.w	r5, r5, #6
 8004464:	d106      	bne.n	8004474 <_printf_common+0x48>
 8004466:	f104 0a19 	add.w	sl, r4, #25
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	42ab      	cmp	r3, r5
 8004472:	dc26      	bgt.n	80044c2 <_printf_common+0x96>
 8004474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	3b00      	subs	r3, #0
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	0692      	lsls	r2, r2, #26
 8004482:	d42b      	bmi.n	80044dc <_printf_common+0xb0>
 8004484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004488:	4641      	mov	r1, r8
 800448a:	4638      	mov	r0, r7
 800448c:	47c8      	blx	r9
 800448e:	3001      	adds	r0, #1
 8004490:	d01e      	beq.n	80044d0 <_printf_common+0xa4>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf02      	ittt	eq
 800449e:	68e5      	ldreq	r5, [r4, #12]
 80044a0:	6833      	ldreq	r3, [r6, #0]
 80044a2:	1aed      	subeq	r5, r5, r3
 80044a4:	68a3      	ldr	r3, [r4, #8]
 80044a6:	bf0c      	ite	eq
 80044a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ac:	2500      	movne	r5, #0
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bfc4      	itt	gt
 80044b2:	1a9b      	subgt	r3, r3, r2
 80044b4:	18ed      	addgt	r5, r5, r3
 80044b6:	2600      	movs	r6, #0
 80044b8:	341a      	adds	r4, #26
 80044ba:	42b5      	cmp	r5, r6
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xc8>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xa8>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4641      	mov	r1, r8
 80044c8:	4638      	mov	r0, r7
 80044ca:	47c8      	blx	r9
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xac>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c6      	b.n	800446a <_printf_common+0x3e>
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	2030      	movs	r0, #48	@ 0x30
 80044e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044e6:	4422      	add	r2, r4
 80044e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044f0:	3302      	adds	r3, #2
 80044f2:	e7c7      	b.n	8004484 <_printf_common+0x58>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4641      	mov	r1, r8
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c8      	blx	r9
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xa4>
 8004502:	3601      	adds	r6, #1
 8004504:	e7d9      	b.n	80044ba <_printf_common+0x8e>
	...

08004508 <_printf_i>:
 8004508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	7e0f      	ldrb	r7, [r1, #24]
 800450e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004510:	2f78      	cmp	r7, #120	@ 0x78
 8004512:	4691      	mov	r9, r2
 8004514:	4680      	mov	r8, r0
 8004516:	460c      	mov	r4, r1
 8004518:	469a      	mov	sl, r3
 800451a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800451e:	d807      	bhi.n	8004530 <_printf_i+0x28>
 8004520:	2f62      	cmp	r7, #98	@ 0x62
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x32>
 8004524:	2f00      	cmp	r7, #0
 8004526:	f000 80d1 	beq.w	80046cc <_printf_i+0x1c4>
 800452a:	2f58      	cmp	r7, #88	@ 0x58
 800452c:	f000 80b8 	beq.w	80046a0 <_printf_i+0x198>
 8004530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004538:	e03a      	b.n	80045b0 <_printf_i+0xa8>
 800453a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800453e:	2b15      	cmp	r3, #21
 8004540:	d8f6      	bhi.n	8004530 <_printf_i+0x28>
 8004542:	a101      	add	r1, pc, #4	@ (adr r1, 8004548 <_printf_i+0x40>)
 8004544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004531 	.word	0x08004531
 8004554:	08004531 	.word	0x08004531
 8004558:	08004531 	.word	0x08004531
 800455c:	08004531 	.word	0x08004531
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004531 	.word	0x08004531
 8004568:	08004531 	.word	0x08004531
 800456c:	08004531 	.word	0x08004531
 8004570:	08004531 	.word	0x08004531
 8004574:	080046b3 	.word	0x080046b3
 8004578:	080045df 	.word	0x080045df
 800457c:	0800466d 	.word	0x0800466d
 8004580:	08004531 	.word	0x08004531
 8004584:	08004531 	.word	0x08004531
 8004588:	080046d5 	.word	0x080046d5
 800458c:	08004531 	.word	0x08004531
 8004590:	080045df 	.word	0x080045df
 8004594:	08004531 	.word	0x08004531
 8004598:	08004531 	.word	0x08004531
 800459c:	08004675 	.word	0x08004675
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6032      	str	r2, [r6, #0]
 80045a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045b0:	2301      	movs	r3, #1
 80045b2:	e09c      	b.n	80046ee <_printf_i+0x1e6>
 80045b4:	6833      	ldr	r3, [r6, #0]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1d19      	adds	r1, r3, #4
 80045ba:	6031      	str	r1, [r6, #0]
 80045bc:	0606      	lsls	r6, r0, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xbc>
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	e003      	b.n	80045cc <_printf_i+0xc4>
 80045c4:	0645      	lsls	r5, r0, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xb8>
 80045c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	da03      	bge.n	80045d8 <_printf_i+0xd0>
 80045d0:	232d      	movs	r3, #45	@ 0x2d
 80045d2:	426d      	negs	r5, r5
 80045d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d8:	4858      	ldr	r0, [pc, #352]	@ (800473c <_printf_i+0x234>)
 80045da:	230a      	movs	r3, #10
 80045dc:	e011      	b.n	8004602 <_printf_i+0xfa>
 80045de:	6821      	ldr	r1, [r4, #0]
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	0608      	lsls	r0, r1, #24
 80045e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80045e8:	d402      	bmi.n	80045f0 <_printf_i+0xe8>
 80045ea:	0649      	lsls	r1, r1, #25
 80045ec:	bf48      	it	mi
 80045ee:	b2ad      	uxthmi	r5, r5
 80045f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80045f2:	4852      	ldr	r0, [pc, #328]	@ (800473c <_printf_i+0x234>)
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	bf14      	ite	ne
 80045f8:	230a      	movne	r3, #10
 80045fa:	2308      	moveq	r3, #8
 80045fc:	2100      	movs	r1, #0
 80045fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004602:	6866      	ldr	r6, [r4, #4]
 8004604:	60a6      	str	r6, [r4, #8]
 8004606:	2e00      	cmp	r6, #0
 8004608:	db05      	blt.n	8004616 <_printf_i+0x10e>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	432e      	orrs	r6, r5
 800460e:	f021 0104 	bic.w	r1, r1, #4
 8004612:	6021      	str	r1, [r4, #0]
 8004614:	d04b      	beq.n	80046ae <_printf_i+0x1a6>
 8004616:	4616      	mov	r6, r2
 8004618:	fbb5 f1f3 	udiv	r1, r5, r3
 800461c:	fb03 5711 	mls	r7, r3, r1, r5
 8004620:	5dc7      	ldrb	r7, [r0, r7]
 8004622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004626:	462f      	mov	r7, r5
 8004628:	42bb      	cmp	r3, r7
 800462a:	460d      	mov	r5, r1
 800462c:	d9f4      	bls.n	8004618 <_printf_i+0x110>
 800462e:	2b08      	cmp	r3, #8
 8004630:	d10b      	bne.n	800464a <_printf_i+0x142>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	07df      	lsls	r7, r3, #31
 8004636:	d508      	bpl.n	800464a <_printf_i+0x142>
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	6861      	ldr	r1, [r4, #4]
 800463c:	4299      	cmp	r1, r3
 800463e:	bfde      	ittt	le
 8004640:	2330      	movle	r3, #48	@ 0x30
 8004642:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004646:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800464a:	1b92      	subs	r2, r2, r6
 800464c:	6122      	str	r2, [r4, #16]
 800464e:	f8cd a000 	str.w	sl, [sp]
 8004652:	464b      	mov	r3, r9
 8004654:	aa03      	add	r2, sp, #12
 8004656:	4621      	mov	r1, r4
 8004658:	4640      	mov	r0, r8
 800465a:	f7ff fee7 	bl	800442c <_printf_common>
 800465e:	3001      	adds	r0, #1
 8004660:	d14a      	bne.n	80046f8 <_printf_i+0x1f0>
 8004662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004666:	b004      	add	sp, #16
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	4832      	ldr	r0, [pc, #200]	@ (8004740 <_printf_i+0x238>)
 8004676:	2778      	movs	r7, #120	@ 0x78
 8004678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	6831      	ldr	r1, [r6, #0]
 8004680:	061f      	lsls	r7, r3, #24
 8004682:	f851 5b04 	ldr.w	r5, [r1], #4
 8004686:	d402      	bmi.n	800468e <_printf_i+0x186>
 8004688:	065f      	lsls	r7, r3, #25
 800468a:	bf48      	it	mi
 800468c:	b2ad      	uxthmi	r5, r5
 800468e:	6031      	str	r1, [r6, #0]
 8004690:	07d9      	lsls	r1, r3, #31
 8004692:	bf44      	itt	mi
 8004694:	f043 0320 	orrmi.w	r3, r3, #32
 8004698:	6023      	strmi	r3, [r4, #0]
 800469a:	b11d      	cbz	r5, 80046a4 <_printf_i+0x19c>
 800469c:	2310      	movs	r3, #16
 800469e:	e7ad      	b.n	80045fc <_printf_i+0xf4>
 80046a0:	4826      	ldr	r0, [pc, #152]	@ (800473c <_printf_i+0x234>)
 80046a2:	e7e9      	b.n	8004678 <_printf_i+0x170>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e7f6      	b.n	800469c <_printf_i+0x194>
 80046ae:	4616      	mov	r6, r2
 80046b0:	e7bd      	b.n	800462e <_printf_i+0x126>
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	6825      	ldr	r5, [r4, #0]
 80046b6:	6961      	ldr	r1, [r4, #20]
 80046b8:	1d18      	adds	r0, r3, #4
 80046ba:	6030      	str	r0, [r6, #0]
 80046bc:	062e      	lsls	r6, r5, #24
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	d501      	bpl.n	80046c6 <_printf_i+0x1be>
 80046c2:	6019      	str	r1, [r3, #0]
 80046c4:	e002      	b.n	80046cc <_printf_i+0x1c4>
 80046c6:	0668      	lsls	r0, r5, #25
 80046c8:	d5fb      	bpl.n	80046c2 <_printf_i+0x1ba>
 80046ca:	8019      	strh	r1, [r3, #0]
 80046cc:	2300      	movs	r3, #0
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	4616      	mov	r6, r2
 80046d2:	e7bc      	b.n	800464e <_printf_i+0x146>
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	6032      	str	r2, [r6, #0]
 80046da:	681e      	ldr	r6, [r3, #0]
 80046dc:	6862      	ldr	r2, [r4, #4]
 80046de:	2100      	movs	r1, #0
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7fb fda5 	bl	8000230 <memchr>
 80046e6:	b108      	cbz	r0, 80046ec <_printf_i+0x1e4>
 80046e8:	1b80      	subs	r0, r0, r6
 80046ea:	6060      	str	r0, [r4, #4]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f6:	e7aa      	b.n	800464e <_printf_i+0x146>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	4632      	mov	r2, r6
 80046fc:	4649      	mov	r1, r9
 80046fe:	4640      	mov	r0, r8
 8004700:	47d0      	blx	sl
 8004702:	3001      	adds	r0, #1
 8004704:	d0ad      	beq.n	8004662 <_printf_i+0x15a>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	079b      	lsls	r3, r3, #30
 800470a:	d413      	bmi.n	8004734 <_printf_i+0x22c>
 800470c:	68e0      	ldr	r0, [r4, #12]
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	4298      	cmp	r0, r3
 8004712:	bfb8      	it	lt
 8004714:	4618      	movlt	r0, r3
 8004716:	e7a6      	b.n	8004666 <_printf_i+0x15e>
 8004718:	2301      	movs	r3, #1
 800471a:	4632      	mov	r2, r6
 800471c:	4649      	mov	r1, r9
 800471e:	4640      	mov	r0, r8
 8004720:	47d0      	blx	sl
 8004722:	3001      	adds	r0, #1
 8004724:	d09d      	beq.n	8004662 <_printf_i+0x15a>
 8004726:	3501      	adds	r5, #1
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	9903      	ldr	r1, [sp, #12]
 800472c:	1a5b      	subs	r3, r3, r1
 800472e:	42ab      	cmp	r3, r5
 8004730:	dcf2      	bgt.n	8004718 <_printf_i+0x210>
 8004732:	e7eb      	b.n	800470c <_printf_i+0x204>
 8004734:	2500      	movs	r5, #0
 8004736:	f104 0619 	add.w	r6, r4, #25
 800473a:	e7f5      	b.n	8004728 <_printf_i+0x220>
 800473c:	080048ad 	.word	0x080048ad
 8004740:	080048be 	.word	0x080048be

08004744 <memmove>:
 8004744:	4288      	cmp	r0, r1
 8004746:	b510      	push	{r4, lr}
 8004748:	eb01 0402 	add.w	r4, r1, r2
 800474c:	d902      	bls.n	8004754 <memmove+0x10>
 800474e:	4284      	cmp	r4, r0
 8004750:	4623      	mov	r3, r4
 8004752:	d807      	bhi.n	8004764 <memmove+0x20>
 8004754:	1e43      	subs	r3, r0, #1
 8004756:	42a1      	cmp	r1, r4
 8004758:	d008      	beq.n	800476c <memmove+0x28>
 800475a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800475e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004762:	e7f8      	b.n	8004756 <memmove+0x12>
 8004764:	4402      	add	r2, r0
 8004766:	4601      	mov	r1, r0
 8004768:	428a      	cmp	r2, r1
 800476a:	d100      	bne.n	800476e <memmove+0x2a>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004776:	e7f7      	b.n	8004768 <memmove+0x24>

08004778 <_sbrk_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d06      	ldr	r5, [pc, #24]	@ (8004794 <_sbrk_r+0x1c>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc fa8c 	bl	8000ca0 <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_sbrk_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_sbrk_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200002d8 	.word	0x200002d8

08004798 <memcpy>:
 8004798:	440a      	add	r2, r1
 800479a:	4291      	cmp	r1, r2
 800479c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80047a0:	d100      	bne.n	80047a4 <memcpy+0xc>
 80047a2:	4770      	bx	lr
 80047a4:	b510      	push	{r4, lr}
 80047a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d1f9      	bne.n	80047a6 <memcpy+0xe>
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <_realloc_r>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	4607      	mov	r7, r0
 80047ba:	4614      	mov	r4, r2
 80047bc:	460d      	mov	r5, r1
 80047be:	b921      	cbnz	r1, 80047ca <_realloc_r+0x16>
 80047c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	4611      	mov	r1, r2
 80047c6:	f7ff bc4d 	b.w	8004064 <_malloc_r>
 80047ca:	b92a      	cbnz	r2, 80047d8 <_realloc_r+0x24>
 80047cc:	f7ff fbde 	bl	8003f8c <_free_r>
 80047d0:	4625      	mov	r5, r4
 80047d2:	4628      	mov	r0, r5
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d8:	f000 f81a 	bl	8004810 <_malloc_usable_size_r>
 80047dc:	4284      	cmp	r4, r0
 80047de:	4606      	mov	r6, r0
 80047e0:	d802      	bhi.n	80047e8 <_realloc_r+0x34>
 80047e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047e6:	d8f4      	bhi.n	80047d2 <_realloc_r+0x1e>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4638      	mov	r0, r7
 80047ec:	f7ff fc3a 	bl	8004064 <_malloc_r>
 80047f0:	4680      	mov	r8, r0
 80047f2:	b908      	cbnz	r0, 80047f8 <_realloc_r+0x44>
 80047f4:	4645      	mov	r5, r8
 80047f6:	e7ec      	b.n	80047d2 <_realloc_r+0x1e>
 80047f8:	42b4      	cmp	r4, r6
 80047fa:	4622      	mov	r2, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	bf28      	it	cs
 8004800:	4632      	movcs	r2, r6
 8004802:	f7ff ffc9 	bl	8004798 <memcpy>
 8004806:	4629      	mov	r1, r5
 8004808:	4638      	mov	r0, r7
 800480a:	f7ff fbbf 	bl	8003f8c <_free_r>
 800480e:	e7f1      	b.n	80047f4 <_realloc_r+0x40>

08004810 <_malloc_usable_size_r>:
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f18      	subs	r0, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfbc      	itt	lt
 800481a:	580b      	ldrlt	r3, [r1, r0]
 800481c:	18c0      	addlt	r0, r0, r3
 800481e:	4770      	bx	lr

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
